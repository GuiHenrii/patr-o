// // index.js
// const Connect = require("@wppconnect-team/wppconnect");
// const cron = require('node-cron');
// const conn = require("./db/conn");
// const Cliente = require("./models/chat.js");
// const updateStage = require("./functions/stage.js");
// const dialogoinicio = require("./dialogs/dialogoinicio.js");
// const dialogoencerra = require("./dialogs/dialogoencerra.js");
// const dialogoatendente = require("./dialogs/dialogoatendente.js");
// const moment = require("moment");
// const dialogoloc = require('./dialogs/Dialogoloc.js');
// const processedMessages = new Set();

// // Lista de números restritos
// const restrictedNumbers = [
//   "556281081584",   // Novo número restrito
//   "556282885001",   // Novo número restrito
//   "556291877310"    // Novo número restrito
// ];

// let botInstance;

// async function startBot() {
//   try {
//     const client = await Connect.create({ session: "Patrão Phone" });
//     botInstance = client;
//     console.log("Bot iniciado!");

//     client.onMessage(async (message) => {
//       try {
//         logMessageTime(message); // Log a hora da mensagem

//         // Formata o número de telefone para verificar se está na lista de restritos
//         const formattedNumber = message.from.replace(/@c\.us/g, "");

//         if (restrictedNumbers.includes(formattedNumber)) {
//           console.log(`Mensagem recebida de número restrito (${formattedNumber}). Ignorando completamente...`);
//           return;
//         }

//         // Verifica se a mensagem já foi processada
//         if (processedMessages.has(message.id.toString())) {
//           console.log("Mensagem repetida. Ignorando...");
//           return;
//         }

//         // Adiciona a mensagem ao conjunto de mensagens processadas
//         processedMessages.add(message.id.toString());

//         // Ignora mensagens de lista de transmissão ou grupos
//         if (message.from === "status@broadcast" || message.isGroupMsg) {
//           console.log("Mensagem de lista de transmissão ou grupo. Ignorando...");
//           return;
//         }

//         // Verifica se a mensagem foi recebida dentro do horário de atendimento
//         const startTime = moment().set({ hour: 8, minute: 30, second: 0 });
//         const endTime = moment().set({ hour: 18, minute: 30, second: 0 });

//         if (!moment().isBetween(startTime, endTime)) {
//           console.log("Mensagem recebida fora do horário permitido.");
//           return
//         }

//         // Processamento de novas mensagens de clientes
//         const tel = formattedNumber;
//         let cliente = await Cliente.findOne({ raw: true, where: { telefone: tel } });

//         if (!cliente) {
//           console.log("Novo atendimento criado");
//           const dados = {
//             nome: message.notifyName,
//             telefone: tel,
//             assunto: "contato Whatsapp",
//             atendido: 1,
//             stage: 1,
//             date: message.timestamp,
//           };
//           const novoCliente = await Cliente.create(dados);
//           dialogoinicio(client, message);
//           updateStage(novoCliente.id, 2, message.timestamp);
//         } else if (message.body && cliente.stage === 1) {
//           dialogoinicio(client, message);
//           updateStage(cliente.id, 2, message.timestamp);
//         } else {
//           // Lógica para diferentes estágios e diálogos
//           handleDialogs(client, message, cliente);
//         }
//       } catch (error) {
//         console.error('Erro ao processar a mensagem:', error);
//       }
//     });

//     // Agendamento para reiniciar o banco de dados a cada 58 minutos
//     cron.schedule('*/58 * * * *', async () => {
//       try {
//         console.log("Reiniciando o banco de dados...");
//         await conn.sync({ force: true });
//         console.log('Banco de dados reiniciado com sucesso!');
//       } catch (error) {
//         console.error('Erro ao reiniciar o banco de dados:', error);
//       }
//     });

//     // Agendamento para reiniciar o bot a cada 1 hora
//     cron.schedule('0 */1 * * *', async () => {
//       console.log("Reiniciando o bot a cada 1 hora...");
//       await restartBot();
//     });

//   } catch (error) {
//     console.error('Erro ao iniciar o bot:', error);
//   }
// }

// // Função para lidar com diálogos de acordo com o estágio do cliente
// function handleDialogs(client, message, cliente) {
//   if (message.body === "1" && cliente.stage === 2) {
//     dialogoatendente(client, message);
//     updateStage(cliente.id, 170, message.timestamp);
//   } else if (message.body === "2" && cliente.stage === 2) {
//     dialogoatendente(client, message);
//     updateStage(cliente.id, 170, message.timestamp);
//   } else if (message.body === "3" && cliente.stage === 2) {
//     dialogoloc(client, message);
//     updateStage(cliente.id, 2, message.timestamp);
//   } else if (message.body === "4" && cliente.stage === 2) {
//     dialogoatendente(client, message);
//     updateStage(cliente.id, 170, message.timestamp);
//   } else if (message.body === "8" && cliente.stage === 2) {
//     dialogoencerra(client, message);
//     updateStage(cliente.id, 170, message.timestamp);
//   }
// }

// // Função para mostrar a hora em que a mensagem chega
// function logMessageTime(message) {
//   const messageTime = moment.unix(message.timestamp).format('YYYY-MM-DD HH:mm:ss');
//   console.log(`Mensagem recebida às: ${messageTime}`);
// }

// // Função para reiniciar o bot
// async function restartBot() {
//   try {
//     console.log("Reiniciando bot...");

//     // Fechando a instância do cliente WPPConnect se existir
//     if (botInstance) {
//       await botInstance.close();
//       console.log("Instância do cliente fechada.");
//     }

//     // Aguardar um tempo antes de reiniciar para garantir que o processo anterior foi encerrado
//     setTimeout(() => {
//       console.log("Reiniciando a aplicação...");
//       process.exit(0); // Fecha o processo atual para que ele seja reiniciado
//     }, 2000); // Tempo de espera de 2 segundos

//   } catch (error) {
//     console.error("Erro ao reiniciar o bot:", error);
//   }
// }

// conn
//   .sync()
//   .then(() => console.log('Conexão com o banco de dados estabelecida.'))
//   .catch((err) => console.log('Erro ao conectar ao banco de dados:', err));

// startBot();